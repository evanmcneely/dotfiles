#!/usr/bin/env bash

# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimiter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimiter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.
#
# ################################################################ #

# restart stuff
cmd + ctrl + alt - y : yabai --restart-service
cmd + ctrl + alt - s : skhd --reload

# # ##### # STACKS # ##### # #

# scroll through stack
alt - n : yabai -m window --focus stack.next || yabai -m window --focus stack.first
alt - p : yabai -m window --focus stack.prev || yabai -m window --focus stack.last
# stack next window onto current window
ctrl + alt + shift - l : window=$(yabai -m query --windows --window | jq -r '.id') && yabai -m window east --stack $window || (yabai -m window $window --toggle float && yabai -m window $window --toggle float)
ctrl + alt + shift - h : window=$(yabai -m query --windows --window | jq -r '.id') && yabai -m window west --stack $window || (yabai -m window $window --toggle float && yabai -m window $window --toggle float)
# create a stack
# ctrl + alt - c : yabai -m query --windows --window | jq -re "." | xargs -I{} yabai -m window 1 --stack {}
# remove stack
# ctrl + alt + shift - c : yabai -m space --layout bsp

# # ##### # SPACES # ##### # #

# scroll through spaces
cmd + alt - 1 : yabaiSwitchSpace 1
cmd + alt - 2 : yabaiSwitchSpace 2
cmd + alt - 3 : yabaiSwitchSpace 3
cmd + alt - 4 : yabaiSwitchSpace 4
# cmd + alt - 1 : yabaiSwitchAndFocusSIP 1
# cmd + alt - 2 : yabaiSwitchAndFocusSIP 2
# cmd + alt - 3 : yabaiSwitchAndFocusSIP 3
# cmd + alt - 4 : yabaiSwitchAndFocusSIP 4
# move active window to next space on current display
cmd + alt + shift - 1 : yabai -m query --spaces --space | jq -re ".index" | xargs -I {} bash -c "if [[ '{}' = '1' ]]; then yabai -m window --space 2; elif [[ '{}' = '2' ]]; then yabai -m window --space 1; fi"
cmd + alt + shift - 2 :yabai -m query --spaces --space | jq -re ".index" | xargs -I {} bash -c "if [[ '{}' = '3' ]]; then yabai -m window --space 4; elif [[ '{}' = '4' ]]; then yabai -m window --space 3; fi"
# move window to space on next display
# cmd + alt - l : yabaiMoveWindowLeftAndFollowFocus
# cmd + alt - h : yabaiMoveWindowRightAndFollowFocus

# # ##### # DISPLAYS # ##### # #

# focus displays
cmd - 1 : yabai -m display --focus 1
cmd - 2 : yabai -m display --focus 2

# # ##### # WINDOWS # ##### # #

# focus windows - navigate around
alt - l : yabai -m window --focus east || yabai -m window --focus $(yabai -m query --spaces --display east | jq '.[] | select(."is-visible" == true) | ."first-window"')
alt - h : yabai -m window --focus west || yabai -m window --focus $(yabai -m query --spaces --display west | jq '.[] | select(."is-visible" == true) | ."last-window"')
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
# swap window
ctrl + alt - h : yabai -m window --swap west || yabaiMoveWindowLeftAndFollowFocus
ctrl + alt - l : yabai -m window --swap east || yabaiMoveWindowRightAndFollowFocus
ctrl + alt - j : yabai -m window --swap south
ctrl + alt - k : yabai -m window --swap north
# rotate tree
ctrl + alt - x : yabai -m space --rotate 90
# balance out all windows both horizontally and vertically
ctrl + alt - e : yabai -m space --balance
## increase window size
shift + alt - left : yabai -m window --resize right:-20:0
shift + alt - down : yabai -m window --resize bottom:0:20
shift + alt - up : yabai -m window --resize bottom:0:-20
shift + alt - right : yabai -m window --resize right:20:0

# # ##### # OTHER # ##### # #

# close active application
ctrl + alt - backspace : $(yabai -m window $(yabai -m query --windows --window | jq -re ".id") --close)
# float / unfloat window and center on screen
alt - f : yabai -m window --toggle float;\
yabai -m window --grid 4:4:1:1:2:2 ## toggle sticky alt - s : yabai -m window --toggle sticky ## toggle sticky, float and resize to picture-in-picture size alt - p : yabai -m window --toggle sticky;\ yabai -m window --grid 5:5:4:0:1:1 ## change layout of desktop ctrl + alt - a : yabai -m space --layout bsp ctrl + alt - d : yabai -m space --layout float
# open wezterm
ctrl + alt - t : /Applications/WezTerm.app/Contents/MacOS/wezterm
